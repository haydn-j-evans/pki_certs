---
# tasks file for deploy_pki_cert
- name: Create temporary build directory
  tempfile:
    state: directory
  register: tempfile

- name: Generate a configuration file which is used to generate a csr and key
  template:
    src: openssl.j2
    dest: "{{ item_path }}/openssl.conf"
    mode: 0644
  loop: 
    - "{{ tempfile }}"
  register: config_stat
  tags:
    - cert

- name: Generate a private key and CSR
  shell: 'openssl req -new -newkey rsa:2048 -days 1095 -sha256 -nodes -out {{ item_path }}/{{ ansible_hostname }}.{{ ansible_domain }}.csr -keyout {{ item_path }}/{{ ansible_hostname }}.{{ ansible_domain }}.key -config "{{ item_path }}/openssl.conf"'
  args:
    chdir: /tmp
    warn: no
  register: gencsr
  loop: "{{ config_stat.results }}"
  when: config_stat.changed
  tags:
    - cert

- name: Slurp the CSR file contents
  slurp:
    src: "{{ item.item.path }}/{{ ansible_hostname }}.{{ ansible_domain }}.csr"
  register: csr_content
  loop: "{{ config_stat.results }}"
  when: gencsr is changed
  tags:
    - cert


# Yes this is ugly, but I did it anway until I have time to figure out how to use teh uri module to do this task.
- name: Request the certificate from the PKI Server  
  shell: curl -s -k -u "{{ ad_user }}:{{ ad_pass }}" --ntlm {{ header_content|regex_replace('\n') }} {{ pki_ca_req_url }} --data "{{ data1_string }}{{ item.content| b64decode | regex_replace('\n') | regex_replace('([+])','%2B') | regex_replace(' ','+') }}{{ data2_string }}" | grep 'certnew.cer?ReqID' |grep location
  no_log: True
  args:
    warn: false
  register: mycert_request
  loop: "{{ csr_content.results }}"
  delegate_to: localhost
  when: csr_content is succeeded
  tags:
    - cert

- name: Download the certificate from the PKI server
  shell: "curl -s -k -u {{ ad_user }}:{{ ad_pass }} --ntlm {{ header_content|regex_replace('\n') }} -o {{ item.item.item.item.path }}/{{ ansible_hostname }}.{{ ansible_domain }}.crt {{ pki_ca_url }}/{{ item.stdout.split('\"')[1][:-1] }}"
  args:
    warn: no
  loop: "{{ mycert_request.results }}"
  no_log: True
  register: mycert_download
  when: csr_content is succeeded
  tags:
    - cert

- name: Upload signed crt file to /etc/pki/tls/certs
  copy:
    remote_src: yes
    src: "{{ item.item.path }}/{{ ansible_hostname }}.{{ ansible_domain }}.crt"
    dest: "/etc/pki/tls/certs/{{ ansible_hostname }}.{{ ansible_domain }}.crt"
    owner: root
    group: root
    mode: 0644
    backup: yes 
  become: True
  register: pki_stat
  loop: "{{ config_stat.results }}"
  tags:
    - verify
    - cert

- name: Upload private key to /etc/pki/tls/private/
  become: True
  copy:
    remote_src: yes
    src: "{{ item.item.path }}/{{ ansible_hostname }}.{{ ansible_domain }}.key"
    dest: "/etc/pki/tls/private/{{ ansible_hostname }}.{{ ansible_domain }}.key"
    owner: root
    group: root
    mode: 0644
    backup: yes 
  register: pki_stat
  loop: "{{ config_stat.results }}"
  tags:
    - verify
    - cert

- name: Copy csr file to /etc/pki/tls/misc 
  copy:
    remote_src: yes
    src: "{{ item.item.path }}/{{ ansible_hostname }}.{{ ansible_domain }}.csr"
    dest: "/etc/pki/tls/misc/{{ ansible_hostname }}.{{ ansible_domain }}.csr"
    owner: root
    group: root
    mode: 0644
    backup: yes 
  become: True
  register: pki_stat
  loop: "{{ config_stat.results }}"
  tags:
    - verify
    - cert

- name: Run cert validation script to ensure crt matches the key
  become: True
  script: validate_cert.sh
  register: validation
  tags:
    - validate

- name: Generate a PFX file for java related programs just in case but we will let them deal with setting the password.
  become: True
  shell: 'openssl pkcs12 -export -out /etc/pki/tls/certs/{{ ansible_hostname }}.{{ ansible_domain }}.p12 -inkey /etc/pki/tls/private/{{ ansible_hostname }}.{{ ansible_domain }}.key -in /etc/pki/tls/certs/{{ ansible_hostname }}.{{ ansible_domain }}.crt -certfile /etc/pki/ca-trust/source/anchors/"{{ local_root_ca_cert }}" -password pass:changeit'
  when: ca_stat.stat.exists
  tags:
    - pfx
